/*
 * This file contains all variables that may be defined different for each user.
 * Make a copy of this file and name it "custom_values.h".
 * Define your values as necessary.
 * 
 * Values you most likely will have to change or at least check for correctness:
 *  - DISPLAY_TITLE
 *  - NUM_LEDS
 *  - LEDS_PER_METER
 *  - LED_TYPE
 *  - NEXTION_TX
 *  - NEXTION_RX
 *  - SENSOR_DTH / SENSOR_DS18B20
 *  - TEMP_DATA_PIN
 *  - DHT_DATA_PIN
 *  - DHT_POWER_PIN
 */

// Text that will be printed on the top left corner of the display
#define DISPLAY_TITLE    "SuperLEDstrip"

//Set DEBUG-LEVEL
#define DEBUGLEVEL     0

// Define your PCB or specify your PINs manually

#define SUPERLEDSTRIPPCB    // ./WeMos_LEDstrip_Nextion_DHT.fzz
// #define DECKENLAMPEPCB      // private PCB
// #define WLEDSHIELD          // https://github.com/srg74/WLED-wemos-shield

/*
 * FastLED
 */
#define DATA_PIN            RX
//overrite DATA_PIN according to defined pcb
#ifdef WLEDSHIELD
  #define DATA_PIN          D4
#endif
#if defined(SUPERLEDSTRIPPCB) || defined(DECKENLAMPEPCB)
  #define DATA_PIN          RX
#endif

#define NUM_LEDS            30
#define LEDS_PER_METER      60
#define LED_TYPE        WS2811
#define COLOR_ORDER        GRB
#define COLOR_CORRECTION    0xFFC880   // default: UncorrectedColor (https://github.com/FastLED/FastLED/wiki/FastLED-Color-Correction)
#define COLOR_TEMPERATURE   Tungsten40W  // default: UncorrectedTemperature
#define DEFAULT_BRIGHTNESS  50
#define DEFAULT_SCENE      101  // default: 101 (rainbow); see list in led_functions.h
#define DEFAULT_PALETTE      0  // 
#define DEFAULT_FPS        120  // frames per second
#define DEFAULT_TEMPO       80  // betas per minute
#define DEFAULT_ROTATION_SPEED 20  // higher is slower; 1 = increments Hue value per 1 every FRAME
#define DEFAULT_FITPALETTE   1  // how often schould a palette fit completely on the whole strip
// `FASTLED_RGBW` and `FASTLED_DMA` only work with coryking's FastLED
#define FASTLED_RGBW            // define this if you use RGBW SK6812 strips
#if DATA_PIN == RX || DATA_PIN == D3
  #define FASTLED_ESP8266_DMA   // define this if you connected the led strip to GPIO pin 3 (commenly RX)
#endif

// Start with lights off?
bool lightON = false;

/*
 * Homie parameters
 */
#define HOMIE_STANDALONE  false   // here you can enable Homies standalone mode

/*
 * Nextion Display
 */
#define NEX_SOFTWARE_SERIAL

// Master RX, TX, connected to Nextion TX, RX
// #define NEXTION_TX          D3  // blue
// #define NEXTION_RX          D4  // yellow
#if defined(WLEDSHIELD) || defined(DECKENLAMPEPCB)
  #define NEXTION_TX          D2  // I2C SDA, blue
  #define NEXTION_RX          D1  // I2C SCL, yellow
#endif
#ifdef SUPERLEDSTRIPPCB
  #define NEXTION_TX          D5  // blue
  #define NEXTION_RX          D6  // yellow
#endif

/*
 * DHT and DS18B20 sensor
 */
// define weather to use DHT or DS18B20 sensor
// will be overwritten if WLEDSHIELD or SUPERLEDSTRIPPCB is defined
// #define SENSOR_DHT
#define SENSOR_DS18B20

#if defined(WLEDSHIELD) || defined(DECKENLAMPEPCB)
  #define SENSOR_DS18B20
  #undef  SENSOR_DHT
  #define TEMP_DATA_PIN         D7
#endif
#ifdef SUPERLEDSTRIPPCB
  #define SENSOR_DS18B20
  #undef  SENSOR_DHT
  #define TEMP_DATA_PIN         D3
#endif

#ifndef TEMP_DATA_PIN
  #define TEMP_DATA_PIN         D7   // PIN connected to DS18B20
#endif
#define DHT_DATA_PIN          D2
#define DHT_POWER_PIN         D8   // DHT will pe turned off between reads to prevent heating itself
#define DHT_WARMUP             5   // Time between power on and reading data
#define DHT_TYPE           DHT22   // Change this if you have a DHT11
#define SENSOR_READ_INTERVAL  60   // Interval the sensor data is read in seconds

// define custom offsets is necessary
#define OFFSET_TEMP      0
#define OFFSET_HUMID     0

/*
 * Buttons
 */
// comment out buttons you do not use
// #define BUTTON01_PIN        D8
// #define BUTTON01_PIN        D3  // WLED-Shield (default)
// #define BUTTON01_PIN        D5  // WLED-Shield (optional)

// default values
#ifdef BUTTON01_PIN
  // Is this a switch or a push button
  bool button01_switch = false;
  // When should an action occur for a push button? press or release?
  bool button01_event_on_press = true;
  // Wether an action other than publishing the event via mqtt should be executed
  bool button01_action = true;
  // Decalare an arry with the outputs you want to toggle or the scenes you want to switch in the defined order
  // If the first value is <100 all values will be considered as ouput numbers. If first value is >=100 they will be considered scenes.
  // All Outputs defined in this array will be turned on/off (or toggled)
  // All scenes defines in this array will be used in that order. After the last defined scene the led stripe will be turned off.
  //  The next press will start again with the first defined scene.
  uint16_t button01_do[] = { 1, 2 };
#endif


/*
 * Digital Output
 */
// comment out outputs you do not use

#define OUTPUT01_PIN        D1
#ifdef OUTPUT01_PIN
  // initial state
  bool output01_on = false;
  bool output01_invert = false;
#endif

#define OUTPUT02_PIN        D2
#ifdef OUTPUT02_PIN
  // initial state
  bool output02_on = false;
  bool output02_invert = false;
#endif
